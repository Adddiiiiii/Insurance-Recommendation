{"ast":null,"code":"/**\r\n * Recommend insurance products based on user profile\r\n * \r\n * @param {Array} insuranceProducts - Array of insurance products\r\n * @param {Object} userProfile - User profile data\r\n * @returns {Array} - Array of recommended products with details\r\n */\nexport const recommendProducts = (insuranceProducts, userProfile) => {\n  const {\n    age,\n    income,\n    financialGoal,\n    riskAppetite\n  } = userProfile;\n  const recommendedProducts = [];\n\n  // First pass: Find exact matches for all criteria\n  for (const product of insuranceProducts) {\n    // Check if product matches user criteria\n    const ageMatch = product.minAge <= age && age <= product.maxAge;\n    const incomeMatch = income >= product.minIncome;\n    const goalMatch = product.suitableFor && Array.isArray(product.suitableFor) && product.suitableFor.includes(financialGoal);\n    const riskMatch = product.risk && Array.isArray(product.risk) && product.risk.includes(riskAppetite);\n    if (ageMatch && incomeMatch && goalMatch && riskMatch) {\n      // Calculate estimated premium\n      const monthlyPremium = Math.round(income * product.premiumFactor / 12 * 100) / 100;\n      recommendedProducts.push({\n        name: product.name,\n        description: product.description,\n        monthlyPremium,\n        annualPremium: monthlyPremium * 12,\n        taxBenefit: product.taxBenefit\n      });\n    }\n  }\n\n  // If no exact matches, try more flexible matching\n  if (recommendedProducts.length === 0) {\n    for (const product of insuranceProducts) {\n      // Check if product matches essential criteria (age and income)\n      const ageMatch = product.minAge <= age && age <= product.maxAge;\n      const incomeMatch = income >= product.minIncome;\n\n      // Either goal or risk should match\n      const goalMatch = product.suitableFor && Array.isArray(product.suitableFor) && product.suitableFor.includes(financialGoal);\n      const riskMatch = product.risk && Array.isArray(product.risk) && product.risk.includes(riskAppetite);\n      if (ageMatch && incomeMatch && (goalMatch || riskMatch)) {\n        // Calculate estimated premium\n        const monthlyPremium = Math.round(income * product.premiumFactor / 12 * 100) / 100;\n        recommendedProducts.push({\n          name: product.name,\n          description: product.description,\n          monthlyPremium,\n          annualPremium: monthlyPremium * 12,\n          taxBenefit: product.taxBenefit,\n          // Flag to indicate this is a partial match\n          partialMatch: true,\n          matchedOnGoal: goalMatch,\n          matchedOnRisk: riskMatch\n        });\n      }\n    }\n  }\n  return recommendedProducts;\n};\n\n/**\r\n * Generate personalized response based on user profile and recommendations\r\n * \r\n * @param {Object} userProfile - User profile data\r\n * @param {Array} recommendedProducts - Array of recommended products\r\n * @returns {String} - Personalized response\r\n */\nexport const generateResponse = (userProfile, recommendedProducts) => {\n  const {\n    age,\n    income,\n    financialGoal,\n    riskAppetite\n  } = userProfile;\n  if (recommendedProducts.length === 0) {\n    return \"Based on your profile, we couldn't find suitable insurance products. Please consider adjusting your preferences or consult with our financial advisors for personalized recommendations.\";\n  }\n  let productNames = recommendedProducts.map(p => p.name);\n  let productNamesText = '';\n  if (productNames.length === 1) {\n    productNamesText = productNames[0];\n  } else {\n    productNamesText = productNames.slice(0, -1).join(', ') + ' and ' + productNames[productNames.length - 1];\n  }\n  const riskDescriptions = {\n    \"Low\": \"conservative approach to financial planning\",\n    \"Medium\": \"balanced approach to risk and returns\",\n    \"High\": \"growth-oriented investment strategy\"\n  };\n  const goalDescriptions = {\n    \"Tax Saving\": \"optimize your tax liabilities\",\n    \"Wealth Creation\": \"build wealth over the long term\",\n    \"Health Security\": \"secure your health and well-being\",\n    \"Life Cover\": \"provide financial security for your loved ones\",\n    \"Retirement\": \"plan for a comfortable retirement\",\n    \"Corporate Benefits\": \"enhance your employee benefits\",\n    \"Low-Risk Savings\": \"grow your savings with minimal risk\",\n    \"Remote Care\": \"access healthcare services remotely\",\n    \"Aged Care\": \"support elderly care needs\",\n    \"Family Planning\": \"prepare for family expansion\",\n    \"Holistic Health\": \"support overall mental and physical wellbeing\",\n    \"Climate Zones\": \"protect against climate-related risks\",\n    \"Tech Homes\": \"secure your smart home technology\",\n    \"Frequent Travelers\": \"protect yourself during travels\"\n  };\n\n  // Add a note about partial matches if applicable\n  let partialMatchNote = \"\";\n  if (recommendedProducts.some(p => p.partialMatch)) {\n    partialMatchNote = \"\\n\\nSome recommendations are based on partial matches to your criteria, but still align well with your overall profile.\";\n  }\n  return `\n    As a ${age}-year-old with a ${riskAppetite.toLowerCase()} risk appetite (a ${riskDescriptions[riskAppetite] || \"personalized investment strategy\"}) \n    and a primary goal of ${financialGoal} (looking to ${goalDescriptions[financialGoal] || \"meet your specific financial objectives\"}), \n    we recommend ${productNamesText}.\n    \n    These products align well with your financial profile and can help you achieve your objectives \n    while staying within your risk comfort zone. The estimated premiums are based on your annual income \n    of â‚¹${income.toLocaleString()}.${partialMatchNote}\n    \n    We suggest scheduling a consultation with a financial advisor to customize these recommendations \n    further based on your specific needs and circumstances.\n  `;\n};","map":{"version":3,"names":["recommendProducts","insuranceProducts","userProfile","age","income","financialGoal","riskAppetite","recommendedProducts","product","ageMatch","minAge","maxAge","incomeMatch","minIncome","goalMatch","suitableFor","Array","isArray","includes","riskMatch","risk","monthlyPremium","Math","round","premiumFactor","push","name","description","annualPremium","taxBenefit","length","partialMatch","matchedOnGoal","matchedOnRisk","generateResponse","productNames","map","p","productNamesText","slice","join","riskDescriptions","goalDescriptions","partialMatchNote","some","toLowerCase","toLocaleString"],"sources":["C:/Users/adity/OneDrive/Documents/AI/Insurance Recommendation Agent/src/utils/recommendationUtils.js"],"sourcesContent":["/**\r\n * Recommend insurance products based on user profile\r\n * \r\n * @param {Array} insuranceProducts - Array of insurance products\r\n * @param {Object} userProfile - User profile data\r\n * @returns {Array} - Array of recommended products with details\r\n */\r\nexport const recommendProducts = (insuranceProducts, userProfile) => {\r\n  const { age, income, financialGoal, riskAppetite } = userProfile;\r\n  const recommendedProducts = [];\r\n  \r\n  // First pass: Find exact matches for all criteria\r\n  for (const product of insuranceProducts) {\r\n    // Check if product matches user criteria\r\n    const ageMatch = product.minAge <= age && age <= product.maxAge;\r\n    const incomeMatch = income >= product.minIncome;\r\n    const goalMatch = product.suitableFor && Array.isArray(product.suitableFor) && \r\n                     product.suitableFor.includes(financialGoal);\r\n    const riskMatch = product.risk && Array.isArray(product.risk) && \r\n                     product.risk.includes(riskAppetite);\r\n    \r\n    if (ageMatch && incomeMatch && goalMatch && riskMatch) {\r\n      // Calculate estimated premium\r\n      const monthlyPremium = Math.round((income * product.premiumFactor) / 12 * 100) / 100;\r\n      \r\n      recommendedProducts.push({\r\n        name: product.name,\r\n        description: product.description,\r\n        monthlyPremium,\r\n        annualPremium: monthlyPremium * 12,\r\n        taxBenefit: product.taxBenefit\r\n      });\r\n    }\r\n  }\r\n  \r\n  // If no exact matches, try more flexible matching\r\n  if (recommendedProducts.length === 0) {\r\n    for (const product of insuranceProducts) {\r\n      // Check if product matches essential criteria (age and income)\r\n      const ageMatch = product.minAge <= age && age <= product.maxAge;\r\n      const incomeMatch = income >= product.minIncome;\r\n      \r\n      // Either goal or risk should match\r\n      const goalMatch = product.suitableFor && Array.isArray(product.suitableFor) && \r\n                       product.suitableFor.includes(financialGoal);\r\n      const riskMatch = product.risk && Array.isArray(product.risk) && \r\n                       product.risk.includes(riskAppetite);\r\n      \r\n      if (ageMatch && incomeMatch && (goalMatch || riskMatch)) {\r\n        // Calculate estimated premium\r\n        const monthlyPremium = Math.round((income * product.premiumFactor) / 12 * 100) / 100;\r\n        \r\n        recommendedProducts.push({\r\n          name: product.name,\r\n          description: product.description,\r\n          monthlyPremium,\r\n          annualPremium: monthlyPremium * 12,\r\n          taxBenefit: product.taxBenefit,\r\n          // Flag to indicate this is a partial match\r\n          partialMatch: true,\r\n          matchedOnGoal: goalMatch,\r\n          matchedOnRisk: riskMatch\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  return recommendedProducts;\r\n};\r\n\r\n/**\r\n * Generate personalized response based on user profile and recommendations\r\n * \r\n * @param {Object} userProfile - User profile data\r\n * @param {Array} recommendedProducts - Array of recommended products\r\n * @returns {String} - Personalized response\r\n */\r\nexport const generateResponse = (userProfile, recommendedProducts) => {\r\n  const { age, income, financialGoal, riskAppetite } = userProfile;\r\n  \r\n  if (recommendedProducts.length === 0) {\r\n    return \"Based on your profile, we couldn't find suitable insurance products. Please consider adjusting your preferences or consult with our financial advisors for personalized recommendations.\";\r\n  }\r\n  \r\n  let productNames = recommendedProducts.map(p => p.name);\r\n  let productNamesText = '';\r\n  \r\n  if (productNames.length === 1) {\r\n    productNamesText = productNames[0];\r\n  } else {\r\n    productNamesText = productNames.slice(0, -1).join(', ') + ' and ' + productNames[productNames.length - 1];\r\n  }\r\n  \r\n  const riskDescriptions = {\r\n    \"Low\": \"conservative approach to financial planning\",\r\n    \"Medium\": \"balanced approach to risk and returns\",\r\n    \"High\": \"growth-oriented investment strategy\"\r\n  };\r\n  \r\n  const goalDescriptions = {\r\n    \"Tax Saving\": \"optimize your tax liabilities\",\r\n    \"Wealth Creation\": \"build wealth over the long term\",\r\n    \"Health Security\": \"secure your health and well-being\",\r\n    \"Life Cover\": \"provide financial security for your loved ones\",\r\n    \"Retirement\": \"plan for a comfortable retirement\",\r\n    \"Corporate Benefits\": \"enhance your employee benefits\",\r\n    \"Low-Risk Savings\": \"grow your savings with minimal risk\",\r\n    \"Remote Care\": \"access healthcare services remotely\",\r\n    \"Aged Care\": \"support elderly care needs\",\r\n    \"Family Planning\": \"prepare for family expansion\",\r\n    \"Holistic Health\": \"support overall mental and physical wellbeing\",\r\n    \"Climate Zones\": \"protect against climate-related risks\",\r\n    \"Tech Homes\": \"secure your smart home technology\",\r\n    \"Frequent Travelers\": \"protect yourself during travels\"\r\n  };\r\n  \r\n  // Add a note about partial matches if applicable\r\n  let partialMatchNote = \"\";\r\n  if (recommendedProducts.some(p => p.partialMatch)) {\r\n    partialMatchNote = \"\\n\\nSome recommendations are based on partial matches to your criteria, but still align well with your overall profile.\";\r\n  }\r\n  \r\n  return `\r\n    As a ${age}-year-old with a ${riskAppetite.toLowerCase()} risk appetite (a ${riskDescriptions[riskAppetite] || \"personalized investment strategy\"}) \r\n    and a primary goal of ${financialGoal} (looking to ${goalDescriptions[financialGoal] || \"meet your specific financial objectives\"}), \r\n    we recommend ${productNamesText}.\r\n    \r\n    These products align well with your financial profile and can help you achieve your objectives \r\n    while staying within your risk comfort zone. The estimated premiums are based on your annual income \r\n    of â‚¹${income.toLocaleString()}.${partialMatchNote}\r\n    \r\n    We suggest scheduling a consultation with a financial advisor to customize these recommendations \r\n    further based on your specific needs and circumstances.\r\n  `;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}